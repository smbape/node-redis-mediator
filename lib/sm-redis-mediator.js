// Generated by CoffeeScript 1.9.2

/**
 * Module dependencies.
 */

(function() {
  var EventEmitter, RedisMediator, log4js, logger, msgpack, redis, uid2,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  uid2 = require('uid2');

  redis = require('redis');

  msgpack = require('msgpack-js');

  EventEmitter = require('events').EventEmitter;

  log4js = global.log4js || (global.log4js = require('log4js'));

  logger = log4js.getLogger('RedisMediator');


  /**
   * Module exports.
   */

  module.exports = RedisMediator = (function(superClass) {
    extend(RedisMediator, superClass);

    function RedisMediator(uri, opts) {
      this.acknowledge = bind(this.acknowledge, this);
      this.onMessage = bind(this.onMessage, this);
      var host, port, prefix, pub, socket, sub, uid;
      opts = opts || {};
      if ('object' === typeof uri) {
        opts = uri;
        uri = null;
      }
      if (uri) {
        uri = uri.split(':');
        opts.host = uri[0];
        opts.port = uri[1];
      }
      socket = opts.socket;
      host = opts.host || '127.0.0.1';
      port = opts.port ? parseInt(opts.port, 10) : 6379;
      pub = opts.pub;
      sub = opts.sub;
      prefix = opts.key || 'RedisMediator';
      this.name = opts.name;
      if (!pub) {
        pub = socket ? redis.createClient(socket) : redis.createClient(port, host);
      }
      if (!sub) {
        sub = socket ? redis.createClient(socket, {
          detect_buffers: true
        }) : redis.createClient(port, host, {
          detect_buffers: true
        });
      }
      uid = uid2(6);
      this.init(uid, prefix, pub, sub);
    }

    RedisMediator.prototype.init = function(uid1, prefix1, pub1, sub1) {
      this.uid = uid1;
      this.prefix = prefix1;
      this.pub = pub1;
      this.sub = sub1;
      this._ids = 0;
      this.acknowledges = {};
      this.key = this.prefix + '#' + this.uid;
      this.sub.psubscribe(this.prefix + '#*', (function(_this) {
        return function(err) {
          if (err) {
            return EventEmitter.prototype.emit.call(_this, 'error', err);
          }
          EventEmitter.prototype.emit.call(_this, 'ready');
        };
      })(this));
      this.sub.on('pmessage', this.onMessage);
    };

    RedisMediator.prototype.onMessage = function(pattern, channel, msg) {
      var args, evt, fn, info, options, packet, ref;
      info = channel.split('#');
      if (this.uid === info[1]) {
        return;
      }
      evt = info[2];
      ref = msgpack.decode(msg), packet = ref[0], options = ref[1];
      args = packet.args;
      if (evt === 'ack') {
        if (!this.acknowledges.hasOwnProperty(options.id)) {
          return;
        }
        fn = this.acknowledges[options.id].fn;
        if (--this.acknowledges[options.id].counter === 0) {
          this.cleanAck(options.id);
        }
        fn.apply(fn.context, args);
        return;
      }
      if (packet.ack) {
        args[args.length] = this.acknowledge(packet.id);
      }
      this._emit(args);
    };

    RedisMediator.prototype.emit = function() {
      this._emit(arguments);
      this.broadcast.apply(this, arguments);
    };

    RedisMediator.prototype._emit = function(args) {
      switch (args.length) {
        case 0:
          EventEmitter.prototype.emit.call(this);
          break;
        case 1:
          EventEmitter.prototype.emit.call(this, args[0]);
          break;
        case 2:
          EventEmitter.prototype.emit.call(this, args[0], args[1]);
          break;
        case 3:
          EventEmitter.prototype.emit.call(this, args[0], args[1], args[2]);
          break;
        default:
          EventEmitter.prototype.emit.apply(this, args);
      }
    };

    RedisMediator.prototype.broadcast = function() {
      var encodedPacket;
      encodedPacket = this.packet(Array.prototype.slice.call(arguments));
      this.pub.publish(this.key + '#message', encodedPacket);
    };

    RedisMediator.prototype.packet = function(args, options) {
      var fn, id, packet;
      packet = {
        id: ++this._ids,
        args: args
      };
      fn = args[args.length - 1];
      if ('function' === typeof fn) {
        packet.args = args.slice(0, args.length - 1);
        packet.ack = true;
        id = packet.id;
        this.acknowledges[id] = {
          fn: fn,
          counter: fn.counter || 1,
          context: fn.context || null
        };
        this.acknowledges[id].timer = setTimeout((function(_this) {
          return function() {
            _this.cleanAck(id);
            if ('function' === typeof fn.timeoutFunc) {
              fn.timeoutFunc();
            }
          };
        })(this), fn.timeout || 10000);
      }
      return msgpack.encode([packet, options]);
    };

    RedisMediator.prototype.cleanAck = function(id) {
      var prop;
      if (!this.acknowledges.hasOwnProperty(id)) {
        return;
      }
      clearTimeout(this.acknowledges[id].timer);
      for (prop in this.acknowledges[id]) {
        delete this.acknowledges[id][prop];
      }
      delete this.acknowledges[id];
    };

    RedisMediator.prototype.acknowledge = function(id) {
      return (function(_this) {
        return function() {
          var args, encodedPacket, options, packet;
          args = Array.prototype.slice.call(arguments);
          packet = {
            id: ++_this._ids,
            args: args
          };
          options = {
            id: id
          };
          encodedPacket = msgpack.encode([packet, options]);
          _this.pub.publish(_this.key + '#ack', encodedPacket);
        };
      })(this);
    };

    return RedisMediator;

  })(EventEmitter);

}).call(this);
